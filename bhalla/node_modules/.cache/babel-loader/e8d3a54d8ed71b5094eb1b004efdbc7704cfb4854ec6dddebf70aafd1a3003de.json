{"ast":null,"code":"var _jsxFileName = \"/Users/vrishantbhalla/Desktop/VSCODE/WT_PROJECT/NEXGEN/bhalla/src/components/particles.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport { Renderer, Camera, Geometry, Program, Mesh } from \"ogl\";\nimport './particles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultColors = [\"#ffffff\", \"#ffffff\", \"#ffffff\"];\nconst hexToRgb = hex => {\n  hex = hex.replace(/^#/, \"\");\n  if (hex.length === 3) {\n    hex = hex.split(\"\").map(c => c + c).join(\"\");\n  }\n  const int = parseInt(hex, 16);\n  const r = (int >> 16 & 255) / 255;\n  const g = (int >> 8 & 255) / 255;\n  const b = (int & 255) / 255;\n  return [r, g, b];\n};\nconst vertex = /* glsl */`\n  attribute vec3 position;\n  attribute vec4 random;\n  attribute vec3 color;\n  \n  uniform mat4 modelMatrix;\n  uniform mat4 viewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform float uTime;\n  uniform float uSpread;\n  uniform float uBaseSize;\n  uniform float uSizeRandomness;\n  \n  varying vec4 vRandom;\n  varying vec3 vColor;\n  \n  void main() {\n    vRandom = random;\n    vColor = color;\n    \n    vec3 pos = position * uSpread;\n    pos.z *= 10.0;\n    \n    vec4 mPos = modelMatrix * vec4(pos, 1.0);\n    float t = uTime;\n    mPos.x += sin(t * random.z + 6.28 * random.w) * mix(0.1, 1.5, random.x);\n    mPos.y += sin(t * random.y + 6.28 * random.x) * mix(0.1, 1.5, random.w);\n    mPos.z += sin(t * random.w + 6.28 * random.y) * mix(0.1, 1.5, random.z);\n    \n    vec4 mvPos = viewMatrix * mPos;\n    gl_PointSize = (uBaseSize * (1.0 + uSizeRandomness * (random.x - 0.5))) / length(mvPos.xyz);\n    gl_Position = projectionMatrix * mvPos;\n  }\n`;\nconst fragment = /* glsl */`\n  precision highp float;\n  \n  uniform float uTime;\n  uniform float uAlphaParticles;\n  varying vec4 vRandom;\n  varying vec3 vColor;\n  \n  void main() {\n    vec2 uv = gl_PointCoord.xy;\n    float d = length(uv - vec2(0.5));\n    \n    if(uAlphaParticles < 0.5) {\n      if(d > 0.5) {\n        discard;\n      }\n      gl_FragColor = vec4(vColor + 0.2 * sin(uv.yxx + uTime + vRandom.y * 6.28), 1.0);\n    } else {\n      float circle = smoothstep(0.5, 0.4, d) * 0.8;\n      gl_FragColor = vec4(vColor + 0.2 * sin(uv.yxx + uTime + vRandom.y * 6.28), circle);\n    }\n  }\n`;\nconst Particles = ({\n  particleCount = 200,\n  particleSpread = 10,\n  speed = 0.1,\n  particleColors,\n  moveParticlesOnHover = false,\n  particleHoverFactor = 1,\n  alphaParticles = false,\n  particleBaseSize = 100,\n  sizeRandomness = 1,\n  cameraDistance = 20,\n  disableRotation = false,\n  className\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const mouseRef = useRef({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n    const renderer = new Renderer({\n      depth: false,\n      alpha: true\n    });\n    const gl = renderer.gl;\n    container.appendChild(gl.canvas);\n    gl.clearColor(0, 0, 0, 0);\n    const camera = new Camera(gl, {\n      fov: 15\n    });\n    camera.position.set(0, 0, cameraDistance);\n    const resize = () => {\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n      renderer.setSize(width, height);\n      camera.perspective({\n        aspect: gl.canvas.width / gl.canvas.height\n      });\n    };\n    window.addEventListener(\"resize\", resize, false);\n    resize();\n    const handleMouseMove = e => {\n      const rect = container.getBoundingClientRect();\n      const x = (e.clientX - rect.left) / rect.width * 2 - 1;\n      const y = -((e.clientY - rect.top) / rect.height * 2 - 1);\n      mouseRef.current = {\n        x,\n        y\n      };\n    };\n    if (moveParticlesOnHover) {\n      container.addEventListener(\"mousemove\", handleMouseMove);\n    }\n    const count = particleCount;\n    const positions = new Float32Array(count * 3);\n    const randoms = new Float32Array(count * 4);\n    const colors = new Float32Array(count * 3);\n    const palette = particleColors && particleColors.length > 0 ? particleColors : defaultColors;\n    for (let i = 0; i < count; i++) {\n      let x, y, z, len;\n      do {\n        x = Math.random() * 2 - 1;\n        y = Math.random() * 2 - 1;\n        z = Math.random() * 2 - 1;\n        len = x * x + y * y + z * z;\n      } while (len > 1 || len === 0);\n      const r = Math.cbrt(Math.random());\n      positions.set([x * r, y * r, z * r], i * 3);\n      randoms.set([Math.random(), Math.random(), Math.random(), Math.random()], i * 4);\n      const col = hexToRgb(palette[Math.floor(Math.random() * palette.length)]);\n      colors.set(col, i * 3);\n    }\n    const geometry = new Geometry(gl, {\n      position: {\n        size: 3,\n        data: positions\n      },\n      random: {\n        size: 4,\n        data: randoms\n      },\n      color: {\n        size: 3,\n        data: colors\n      }\n    });\n    const program = new Program(gl, {\n      vertex,\n      fragment,\n      uniforms: {\n        uTime: {\n          value: 0\n        },\n        uSpread: {\n          value: particleSpread\n        },\n        uBaseSize: {\n          value: particleBaseSize\n        },\n        uSizeRandomness: {\n          value: sizeRandomness\n        },\n        uAlphaParticles: {\n          value: alphaParticles ? 1 : 0\n        }\n      },\n      transparent: true,\n      depthTest: false\n    });\n    const particles = new Mesh(gl, {\n      mode: gl.POINTS,\n      geometry,\n      program\n    });\n    let animationFrameId;\n    let lastTime = performance.now();\n    let elapsed = 0;\n    const update = t => {\n      animationFrameId = requestAnimationFrame(update);\n      const delta = t - lastTime;\n      lastTime = t;\n      elapsed += delta * speed;\n      program.uniforms.uTime.value = elapsed * 0.001;\n      if (moveParticlesOnHover) {\n        particles.position.x = -mouseRef.current.x * particleHoverFactor;\n        particles.position.y = -mouseRef.current.y * particleHoverFactor;\n      } else {\n        particles.position.x = 0;\n        particles.position.y = 0;\n      }\n      if (!disableRotation) {\n        particles.rotation.x = Math.sin(elapsed * 0.0002) * 0.1;\n        particles.rotation.y = Math.cos(elapsed * 0.0005) * 0.15;\n        particles.rotation.z += 0.01 * speed;\n      }\n      renderer.render({\n        scene: particles,\n        camera\n      });\n    };\n    animationFrameId = requestAnimationFrame(update);\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n      if (moveParticlesOnHover) {\n        container.removeEventListener(\"mousemove\", handleMouseMove);\n      }\n      cancelAnimationFrame(animationFrameId);\n      if (container.contains(gl.canvas)) {\n        container.removeChild(gl.canvas);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [particleCount, particleSpread, speed, moveParticlesOnHover, particleHoverFactor, alphaParticles, particleBaseSize, sizeRandomness, cameraDistance, disableRotation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: `particles-container ${className}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n};\n_s(Particles, \"+nF1yJvQLVO//ZYCcNavPZmnV1A=\");\n_c = Particles;\nexport default Particles;\nvar _c;\n$RefreshReg$(_c, \"Particles\");","map":{"version":3,"names":["useEffect","useRef","Renderer","Camera","Geometry","Program","Mesh","jsxDEV","_jsxDEV","defaultColors","hexToRgb","hex","replace","length","split","map","c","join","int","parseInt","r","g","b","vertex","fragment","Particles","particleCount","particleSpread","speed","particleColors","moveParticlesOnHover","particleHoverFactor","alphaParticles","particleBaseSize","sizeRandomness","cameraDistance","disableRotation","className","_s","containerRef","mouseRef","x","y","container","current","renderer","depth","alpha","gl","appendChild","canvas","clearColor","camera","fov","position","set","resize","width","clientWidth","height","clientHeight","setSize","perspective","aspect","window","addEventListener","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","count","positions","Float32Array","randoms","colors","palette","i","z","len","Math","random","cbrt","col","floor","geometry","size","data","color","program","uniforms","uTime","value","uSpread","uBaseSize","uSizeRandomness","uAlphaParticles","transparent","depthTest","particles","mode","POINTS","animationFrameId","lastTime","performance","now","elapsed","update","t","requestAnimationFrame","delta","rotation","sin","cos","render","scene","removeEventListener","cancelAnimationFrame","contains","removeChild","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vrishantbhalla/Desktop/VSCODE/WT_PROJECT/NEXGEN/bhalla/src/components/particles.js"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { Renderer, Camera, Geometry, Program, Mesh } from \"ogl\";\n\nimport './particles.css';\n\nconst defaultColors = [\"#ffffff\", \"#ffffff\", \"#ffffff\"];\n\nconst hexToRgb = (hex) => {\n  hex = hex.replace(/^#/, \"\");\n  if (hex.length === 3) {\n    hex = hex.split(\"\").map((c) => c + c).join(\"\");\n  }\n  const int = parseInt(hex, 16);\n  const r = ((int >> 16) & 255) / 255;\n  const g = ((int >> 8) & 255) / 255;\n  const b = (int & 255) / 255;\n  return [r, g, b];\n};\n\nconst vertex = /* glsl */ `\n  attribute vec3 position;\n  attribute vec4 random;\n  attribute vec3 color;\n  \n  uniform mat4 modelMatrix;\n  uniform mat4 viewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform float uTime;\n  uniform float uSpread;\n  uniform float uBaseSize;\n  uniform float uSizeRandomness;\n  \n  varying vec4 vRandom;\n  varying vec3 vColor;\n  \n  void main() {\n    vRandom = random;\n    vColor = color;\n    \n    vec3 pos = position * uSpread;\n    pos.z *= 10.0;\n    \n    vec4 mPos = modelMatrix * vec4(pos, 1.0);\n    float t = uTime;\n    mPos.x += sin(t * random.z + 6.28 * random.w) * mix(0.1, 1.5, random.x);\n    mPos.y += sin(t * random.y + 6.28 * random.x) * mix(0.1, 1.5, random.w);\n    mPos.z += sin(t * random.w + 6.28 * random.y) * mix(0.1, 1.5, random.z);\n    \n    vec4 mvPos = viewMatrix * mPos;\n    gl_PointSize = (uBaseSize * (1.0 + uSizeRandomness * (random.x - 0.5))) / length(mvPos.xyz);\n    gl_Position = projectionMatrix * mvPos;\n  }\n`;\n\nconst fragment = /* glsl */ `\n  precision highp float;\n  \n  uniform float uTime;\n  uniform float uAlphaParticles;\n  varying vec4 vRandom;\n  varying vec3 vColor;\n  \n  void main() {\n    vec2 uv = gl_PointCoord.xy;\n    float d = length(uv - vec2(0.5));\n    \n    if(uAlphaParticles < 0.5) {\n      if(d > 0.5) {\n        discard;\n      }\n      gl_FragColor = vec4(vColor + 0.2 * sin(uv.yxx + uTime + vRandom.y * 6.28), 1.0);\n    } else {\n      float circle = smoothstep(0.5, 0.4, d) * 0.8;\n      gl_FragColor = vec4(vColor + 0.2 * sin(uv.yxx + uTime + vRandom.y * 6.28), circle);\n    }\n  }\n`;\n\nconst Particles = ({\n  particleCount = 200,\n  particleSpread = 10,\n  speed = 0.1,\n  particleColors,\n  moveParticlesOnHover = false,\n  particleHoverFactor = 1,\n  alphaParticles = false,\n  particleBaseSize = 100,\n  sizeRandomness = 1,\n  cameraDistance = 20,\n  disableRotation = false,\n  className,\n}) => {\n  const containerRef = useRef(null);\n  const mouseRef = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const renderer = new Renderer({ depth: false, alpha: true });\n    const gl = renderer.gl;\n    container.appendChild(gl.canvas);\n    gl.clearColor(0, 0, 0, 0);\n\n    const camera = new Camera(gl, { fov: 15 });\n    camera.position.set(0, 0, cameraDistance);\n\n    const resize = () => {\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n      renderer.setSize(width, height);\n      camera.perspective({ aspect: gl.canvas.width / gl.canvas.height });\n    };\n    window.addEventListener(\"resize\", resize, false);\n    resize();\n\n    const handleMouseMove = (e) => {\n      const rect = container.getBoundingClientRect();\n      const x = ((e.clientX - rect.left) / rect.width) * 2 - 1;\n      const y = -(((e.clientY - rect.top) / rect.height) * 2 - 1);\n      mouseRef.current = { x, y };\n    };\n\n    if (moveParticlesOnHover) {\n      container.addEventListener(\"mousemove\", handleMouseMove);\n    }\n\n    const count = particleCount;\n    const positions = new Float32Array(count * 3);\n    const randoms = new Float32Array(count * 4);\n    const colors = new Float32Array(count * 3);\n    const palette = particleColors && particleColors.length > 0 ? particleColors : defaultColors;\n\n    for (let i = 0; i < count; i++) {\n      let x, y, z, len;\n      do {\n        x = Math.random() * 2 - 1;\n        y = Math.random() * 2 - 1;\n        z = Math.random() * 2 - 1;\n        len = x * x + y * y + z * z;\n      } while (len > 1 || len === 0);\n      const r = Math.cbrt(Math.random());\n      positions.set([x * r, y * r, z * r], i * 3);\n      randoms.set([Math.random(), Math.random(), Math.random(), Math.random()], i * 4);\n      const col = hexToRgb(palette[Math.floor(Math.random() * palette.length)]);\n      colors.set(col, i * 3);\n    }\n\n    const geometry = new Geometry(gl, {\n      position: { size: 3, data: positions },\n      random: { size: 4, data: randoms },\n      color: { size: 3, data: colors },\n    });\n\n    const program = new Program(gl, {\n      vertex,\n      fragment,\n      uniforms: {\n        uTime: { value: 0 },\n        uSpread: { value: particleSpread },\n        uBaseSize: { value: particleBaseSize },\n        uSizeRandomness: { value: sizeRandomness },\n        uAlphaParticles: { value: alphaParticles ? 1 : 0 },\n      },\n      transparent: true,\n      depthTest: false,\n    });\n\n    const particles = new Mesh(gl, { mode: gl.POINTS, geometry, program });\n\n    let animationFrameId;\n    let lastTime = performance.now();\n    let elapsed = 0;\n\n    const update = (t) => {\n      animationFrameId = requestAnimationFrame(update);\n      const delta = t - lastTime;\n      lastTime = t;\n      elapsed += delta * speed;\n\n      program.uniforms.uTime.value = elapsed * 0.001;\n\n      if (moveParticlesOnHover) {\n        particles.position.x = -mouseRef.current.x * particleHoverFactor;\n        particles.position.y = -mouseRef.current.y * particleHoverFactor;\n      } else {\n        particles.position.x = 0;\n        particles.position.y = 0;\n      }\n\n      if (!disableRotation) {\n        particles.rotation.x = Math.sin(elapsed * 0.0002) * 0.1;\n        particles.rotation.y = Math.cos(elapsed * 0.0005) * 0.15;\n        particles.rotation.z += 0.01 * speed;\n      }\n\n      renderer.render({ scene: particles, camera });\n    };\n\n    animationFrameId = requestAnimationFrame(update);\n\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n      if (moveParticlesOnHover) {\n        container.removeEventListener(\"mousemove\", handleMouseMove);\n      }\n      cancelAnimationFrame(animationFrameId);\n      if (container.contains(gl.canvas)) {\n        container.removeChild(gl.canvas);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    particleCount,\n    particleSpread,\n    speed,\n    moveParticlesOnHover,\n    particleHoverFactor,\n    alphaParticles,\n    particleBaseSize,\n    sizeRandomness,\n    cameraDistance,\n    disableRotation,\n  ]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={`particles-container ${className}`}\n    />\n  );\n};\n\nexport default Particles;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,IAAI,QAAQ,KAAK;AAE/D,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,aAAa,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;AAEvD,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EACxBA,GAAG,GAAGA,GAAG,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAC3B,IAAID,GAAG,CAACE,MAAM,KAAK,CAAC,EAAE;IACpBF,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,GAAGA,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EAChD;EACA,MAAMC,GAAG,GAAGC,QAAQ,CAACR,GAAG,EAAE,EAAE,CAAC;EAC7B,MAAMS,CAAC,GAAG,CAAEF,GAAG,IAAI,EAAE,GAAI,GAAG,IAAI,GAAG;EACnC,MAAMG,CAAC,GAAG,CAAEH,GAAG,IAAI,CAAC,GAAI,GAAG,IAAI,GAAG;EAClC,MAAMI,CAAC,GAAG,CAACJ,GAAG,GAAG,GAAG,IAAI,GAAG;EAC3B,OAAO,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;AAClB,CAAC;AAED,MAAMC,MAAM,GAAG,UAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,QAAQ,GAAG,UAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,SAAS,GAAGA,CAAC;EACjBC,aAAa,GAAG,GAAG;EACnBC,cAAc,GAAG,EAAE;EACnBC,KAAK,GAAG,GAAG;EACXC,cAAc;EACdC,oBAAoB,GAAG,KAAK;EAC5BC,mBAAmB,GAAG,CAAC;EACvBC,cAAc,GAAG,KAAK;EACtBC,gBAAgB,GAAG,GAAG;EACtBC,cAAc,GAAG,CAAC;EAClBC,cAAc,GAAG,EAAE;EACnBC,eAAe,GAAG,KAAK;EACvBC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,YAAY,GAAGtC,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMuC,QAAQ,GAAGvC,MAAM,CAAC;IAAEwC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAEvC1C,SAAS,CAAC,MAAM;IACd,MAAM2C,SAAS,GAAGJ,YAAY,CAACK,OAAO;IACtC,IAAI,CAACD,SAAS,EAAE;IAEhB,MAAME,QAAQ,GAAG,IAAI3C,QAAQ,CAAC;MAAE4C,KAAK,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IAC5D,MAAMC,EAAE,GAAGH,QAAQ,CAACG,EAAE;IACtBL,SAAS,CAACM,WAAW,CAACD,EAAE,CAACE,MAAM,CAAC;IAChCF,EAAE,CAACG,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAEzB,MAAMC,MAAM,GAAG,IAAIjD,MAAM,CAAC6C,EAAE,EAAE;MAAEK,GAAG,EAAE;IAAG,CAAC,CAAC;IAC1CD,MAAM,CAACE,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAEpB,cAAc,CAAC;IAEzC,MAAMqB,MAAM,GAAGA,CAAA,KAAM;MACnB,MAAMC,KAAK,GAAGd,SAAS,CAACe,WAAW;MACnC,MAAMC,MAAM,GAAGhB,SAAS,CAACiB,YAAY;MACrCf,QAAQ,CAACgB,OAAO,CAACJ,KAAK,EAAEE,MAAM,CAAC;MAC/BP,MAAM,CAACU,WAAW,CAAC;QAAEC,MAAM,EAAEf,EAAE,CAACE,MAAM,CAACO,KAAK,GAAGT,EAAE,CAACE,MAAM,CAACS;MAAO,CAAC,CAAC;IACpE,CAAC;IACDK,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAET,MAAM,EAAE,KAAK,CAAC;IAChDA,MAAM,CAAC,CAAC;IAER,MAAMU,eAAe,GAAIC,CAAC,IAAK;MAC7B,MAAMC,IAAI,GAAGzB,SAAS,CAAC0B,qBAAqB,CAAC,CAAC;MAC9C,MAAM5B,CAAC,GAAI,CAAC0B,CAAC,CAACG,OAAO,GAAGF,IAAI,CAACG,IAAI,IAAIH,IAAI,CAACX,KAAK,GAAI,CAAC,GAAG,CAAC;MACxD,MAAMf,CAAC,GAAG,EAAG,CAACyB,CAAC,CAACK,OAAO,GAAGJ,IAAI,CAACK,GAAG,IAAIL,IAAI,CAACT,MAAM,GAAI,CAAC,GAAG,CAAC,CAAC;MAC3DnB,QAAQ,CAACI,OAAO,GAAG;QAAEH,CAAC;QAAEC;MAAE,CAAC;IAC7B,CAAC;IAED,IAAIZ,oBAAoB,EAAE;MACxBa,SAAS,CAACsB,gBAAgB,CAAC,WAAW,EAAEC,eAAe,CAAC;IAC1D;IAEA,MAAMQ,KAAK,GAAGhD,aAAa;IAC3B,MAAMiD,SAAS,GAAG,IAAIC,YAAY,CAACF,KAAK,GAAG,CAAC,CAAC;IAC7C,MAAMG,OAAO,GAAG,IAAID,YAAY,CAACF,KAAK,GAAG,CAAC,CAAC;IAC3C,MAAMI,MAAM,GAAG,IAAIF,YAAY,CAACF,KAAK,GAAG,CAAC,CAAC;IAC1C,MAAMK,OAAO,GAAGlD,cAAc,IAAIA,cAAc,CAAChB,MAAM,GAAG,CAAC,GAAGgB,cAAc,GAAGpB,aAAa;IAE5F,KAAK,IAAIuE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,KAAK,EAAEM,CAAC,EAAE,EAAE;MAC9B,IAAIvC,CAAC,EAAEC,CAAC,EAAEuC,CAAC,EAAEC,GAAG;MAChB,GAAG;QACDzC,CAAC,GAAG0C,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;QACzB1C,CAAC,GAAGyC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;QACzBH,CAAC,GAAGE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;QACzBF,GAAG,GAAGzC,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,GAAGuC,CAAC,GAAGA,CAAC;MAC7B,CAAC,QAAQC,GAAG,GAAG,CAAC,IAAIA,GAAG,KAAK,CAAC;MAC7B,MAAM9D,CAAC,GAAG+D,IAAI,CAACE,IAAI,CAACF,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;MAClCT,SAAS,CAACpB,GAAG,CAAC,CAACd,CAAC,GAAGrB,CAAC,EAAEsB,CAAC,GAAGtB,CAAC,EAAE6D,CAAC,GAAG7D,CAAC,CAAC,EAAE4D,CAAC,GAAG,CAAC,CAAC;MAC3CH,OAAO,CAACtB,GAAG,CAAC,CAAC4B,IAAI,CAACC,MAAM,CAAC,CAAC,EAAED,IAAI,CAACC,MAAM,CAAC,CAAC,EAAED,IAAI,CAACC,MAAM,CAAC,CAAC,EAAED,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEJ,CAAC,GAAG,CAAC,CAAC;MAChF,MAAMM,GAAG,GAAG5E,QAAQ,CAACqE,OAAO,CAACI,IAAI,CAACI,KAAK,CAACJ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGL,OAAO,CAAClE,MAAM,CAAC,CAAC,CAAC;MACzEiE,MAAM,CAACvB,GAAG,CAAC+B,GAAG,EAAEN,CAAC,GAAG,CAAC,CAAC;IACxB;IAEA,MAAMQ,QAAQ,GAAG,IAAIpF,QAAQ,CAAC4C,EAAE,EAAE;MAChCM,QAAQ,EAAE;QAAEmC,IAAI,EAAE,CAAC;QAAEC,IAAI,EAAEf;MAAU,CAAC;MACtCS,MAAM,EAAE;QAAEK,IAAI,EAAE,CAAC;QAAEC,IAAI,EAAEb;MAAQ,CAAC;MAClCc,KAAK,EAAE;QAAEF,IAAI,EAAE,CAAC;QAAEC,IAAI,EAAEZ;MAAO;IACjC,CAAC,CAAC;IAEF,MAAMc,OAAO,GAAG,IAAIvF,OAAO,CAAC2C,EAAE,EAAE;MAC9BzB,MAAM;MACNC,QAAQ;MACRqE,QAAQ,EAAE;QACRC,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAE,CAAC;QACnBC,OAAO,EAAE;UAAED,KAAK,EAAEpE;QAAe,CAAC;QAClCsE,SAAS,EAAE;UAAEF,KAAK,EAAE9D;QAAiB,CAAC;QACtCiE,eAAe,EAAE;UAAEH,KAAK,EAAE7D;QAAe,CAAC;QAC1CiE,eAAe,EAAE;UAAEJ,KAAK,EAAE/D,cAAc,GAAG,CAAC,GAAG;QAAE;MACnD,CAAC;MACDoE,WAAW,EAAE,IAAI;MACjBC,SAAS,EAAE;IACb,CAAC,CAAC;IAEF,MAAMC,SAAS,GAAG,IAAIhG,IAAI,CAAC0C,EAAE,EAAE;MAAEuD,IAAI,EAAEvD,EAAE,CAACwD,MAAM;MAAEhB,QAAQ;MAAEI;IAAQ,CAAC,CAAC;IAEtE,IAAIa,gBAAgB;IACpB,IAAIC,QAAQ,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;IAChC,IAAIC,OAAO,GAAG,CAAC;IAEf,MAAMC,MAAM,GAAIC,CAAC,IAAK;MACpBN,gBAAgB,GAAGO,qBAAqB,CAACF,MAAM,CAAC;MAChD,MAAMG,KAAK,GAAGF,CAAC,GAAGL,QAAQ;MAC1BA,QAAQ,GAAGK,CAAC;MACZF,OAAO,IAAII,KAAK,GAAGrF,KAAK;MAExBgE,OAAO,CAACC,QAAQ,CAACC,KAAK,CAACC,KAAK,GAAGc,OAAO,GAAG,KAAK;MAE9C,IAAI/E,oBAAoB,EAAE;QACxBwE,SAAS,CAAChD,QAAQ,CAACb,CAAC,GAAG,CAACD,QAAQ,CAACI,OAAO,CAACH,CAAC,GAAGV,mBAAmB;QAChEuE,SAAS,CAAChD,QAAQ,CAACZ,CAAC,GAAG,CAACF,QAAQ,CAACI,OAAO,CAACF,CAAC,GAAGX,mBAAmB;MAClE,CAAC,MAAM;QACLuE,SAAS,CAAChD,QAAQ,CAACb,CAAC,GAAG,CAAC;QACxB6D,SAAS,CAAChD,QAAQ,CAACZ,CAAC,GAAG,CAAC;MAC1B;MAEA,IAAI,CAACN,eAAe,EAAE;QACpBkE,SAAS,CAACY,QAAQ,CAACzE,CAAC,GAAG0C,IAAI,CAACgC,GAAG,CAACN,OAAO,GAAG,MAAM,CAAC,GAAG,GAAG;QACvDP,SAAS,CAACY,QAAQ,CAACxE,CAAC,GAAGyC,IAAI,CAACiC,GAAG,CAACP,OAAO,GAAG,MAAM,CAAC,GAAG,IAAI;QACxDP,SAAS,CAACY,QAAQ,CAACjC,CAAC,IAAI,IAAI,GAAGrD,KAAK;MACtC;MAEAiB,QAAQ,CAACwE,MAAM,CAAC;QAAEC,KAAK,EAAEhB,SAAS;QAAElD;MAAO,CAAC,CAAC;IAC/C,CAAC;IAEDqD,gBAAgB,GAAGO,qBAAqB,CAACF,MAAM,CAAC;IAEhD,OAAO,MAAM;MACX9C,MAAM,CAACuD,mBAAmB,CAAC,QAAQ,EAAE/D,MAAM,CAAC;MAC5C,IAAI1B,oBAAoB,EAAE;QACxBa,SAAS,CAAC4E,mBAAmB,CAAC,WAAW,EAAErD,eAAe,CAAC;MAC7D;MACAsD,oBAAoB,CAACf,gBAAgB,CAAC;MACtC,IAAI9D,SAAS,CAAC8E,QAAQ,CAACzE,EAAE,CAACE,MAAM,CAAC,EAAE;QACjCP,SAAS,CAAC+E,WAAW,CAAC1E,EAAE,CAACE,MAAM,CAAC;MAClC;IACF,CAAC;IACD;EACF,CAAC,EAAE,CACDxB,aAAa,EACbC,cAAc,EACdC,KAAK,EACLE,oBAAoB,EACpBC,mBAAmB,EACnBC,cAAc,EACdC,gBAAgB,EAChBC,cAAc,EACdC,cAAc,EACdC,eAAe,CAChB,CAAC;EAEF,oBACE5B,OAAA;IACEmH,GAAG,EAAEpF,YAAa;IAClBF,SAAS,EAAE,uBAAuBA,SAAS;EAAG;IAAAuF,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEN,CAAC;AAACzF,EAAA,CAzJIb,SAAS;AAAAuG,EAAA,GAATvG,SAAS;AA2Jf,eAAeA,SAAS;AAAC,IAAAuG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}